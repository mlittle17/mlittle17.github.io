////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
  let arr = [];
  let counter = start;
  
  while(counter <= end) {
    arr.push(counter);
    counter++
  }
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let sum = 0;
  if(array.length === 0) {
    return array.length;
  } else {
    for(let i = 0; i < array.length; i++) {
      sum += array[i];
    }
        
  }
    return sum;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let newArr = [];
  for(let i = array.length - 1; i >= 0; i--) {
    newArr.push(array[i]);
  }
    console.log(newArr);
    return newArr;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
    return array.reverse();
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//I: An array of valuesToString
//O: An object
function arrayToList(array) {
  // starting with the first element in the array, make that our first "value's" value
  // create an additional rest key who's value is a nested object
  // set a default value for my list
//   let list = null;
  
//   for(let i = array.length - 1; i >= 0; i--) {
//     if(array[i - 1]) {
//       list = {value: array[i -1], rest: list};
//     }
//   }
//   return list;
// }
// if there are no eements in the array, return 
// stopping recursing when we have no more element in the array
// if(!array.length) {
//   return null
// }

// if(array.length === 1) {
//   return {value: array[0], rest: null}
// }
//   return {value: array[0], rest: arrayToList(array.slice(1))};

  let list = null;
  for (let i = array.length - 1; i >= 0; i--) {
    list = {value: array[i], rest: list};
  }
  return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  let arr = [];
  for(let value in list) {
      arr.push(list.value)
  } return arr
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual() {

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
